"""
Script to set up the database and run migrations.
"""
import os
import sys
from sqlalchemy import create_engine
from alembic.config import Config
from alembic import command

# Add the app directory to the path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.config import settings

def setup_alembic():
    """Set up Alembic configuration."""
    print("Setting up Alembic...")
    
    # Create the alembic directory if it doesn't exist
    alembic_dir = os.path.join(os.path.dirname(__file__), "alembic")
    if not os.path.exists(alembic_dir):
        os.makedirs(alembic_dir)
    
    # Create the versions directory if it doesn't exist
    versions_dir = os.path.join(alembic_dir, "versions")
    if not os.path.exists(versions_dir):
        os.makedirs(versions_dir)
    
    # Create the env.py file if it doesn't exist
    env_py = os.path.join(alembic_dir, "env.py")
    if not os.path.exists(env_py):
        with open(env_py, "w") as f:
            f.write("""
from logging.config import fileConfig
from sqlalchemy import create_engine
from alembic import context
import os
import sys

# Add the app directory to the path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.config import settings
from app.db.base_class import Base

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = settings.SQLALCHEMY_DATABASE_URI
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = create_engine(settings.SQLALCHEMY_DATABASE_URI)

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
""")
    
    # Create the script.py.mako file if it doesn't exist
    script_py_mako = os.path.join(alembic_dir, "script.py.mako")
    if not os.path.exists(script_py_mako):
        with open(script_py_mako, "w") as f:
            f.write("""## autogenerated by Alembic
# please adjust!
""" + """${up_revision}\n${down_revision}\n${imports}\n\n""" + """
def upgrade():
    ${upgrades if upgrades else "pass"}


def downgrade():
    ${downgrades if downgrades else "pass"}
""")
    
    print("Alembic setup complete.")

def run_migrations():
    """Run database migrations."""
    print("Running database migrations...")
    
    # Configure Alembic
    alembic_cfg = Config()
    alembic_cfg.set_main_option('script_location', 'app/db/alembic')
    alembic_cfg.set_main_option('sqlalchemy.url', settings.SQLALCHEMY_DATABASE_URI)
    
    # Run migrations
    command.upgrade(alembic_cfg, 'head')
    print("Database migrations completed successfully.")

def create_tables():
    """Create database tables directly."""
    print("Creating database tables...")
    
    from sqlalchemy import create_engine
    from app.db.base_class import Base
    from app.models import *  # Import all models to ensure they are registered with SQLAlchemy
    
    engine = create_engine(settings.SQLALCHEMY_DATABASE_URI)
    Base.metadata.create_all(bind=engine)
    print("Database tables created successfully.")

def main():
    """Main function to set up the database."""
    try:
        # Set up Alembic
        setup_alembic()
        
        # Try to run migrations
        try:
            run_migrations()
        except Exception as e:
            print(f"Failed to run migrations: {e}")
            print("Falling back to direct table creation...")
            create_tables()
        
        print("Database setup complete.")
    except Exception as e:
        print(f"Error setting up database: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
